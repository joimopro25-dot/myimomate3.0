// src/utils/ConversionValidation.js
// üõ°Ô∏è SISTEMA DE VALIDA√á√ïES OBRIGAT√ìRIAS PARA CONVERS√ÉO
// =====================================================
// MyImoMate 3.0 - Valida√ß√µes rigorosas antes da convers√£o
// ‚úÖ Valida√ß√µes portuguesas completas (CC, NIF, CP)
// ‚úÖ Verifica√ß√£o de dados obrigat√≥rios
// ‚úÖ Valida√ß√£o de estrutura de dados
// ‚úÖ Preven√ß√£o de convers√µes incompletas
// ‚úÖ Sistema de pontua√ß√£o de qualidade
// ‚úÖ Relat√≥rios detalhados de valida√ß√£o

// ‚úÖ CONSTANTES DE VALIDA√á√ÉO
const VALIDATION_RULES = {
  // Dados pessoais obrigat√≥rios
  REQUIRED_PERSONAL_FIELDS: [
    'numeroCC',
    'numeroFiscal', 
    'profissao',
    'residencia.rua',
    'residencia.codigoPostal',
    'residencia.localidade',
    'naturalidade.concelho'
  ],
  
  // Dados financeiros obrigat√≥rios
  REQUIRED_FINANCIAL_FIELDS: [
    'rendimentoMensal_OR_rendimentoAnual'
  ],
  
  // Dados do im√≥vel obrigat√≥rios
  REQUIRED_PROPERTY_FIELDS: [
    'tipoImovelProcurado',
    'orcamentoMaximo'
  ],
  
  // Timeline obrigat√≥rio
  REQUIRED_TIMELINE_FIELDS: [
    'prazoDecisao',
    'motivoCompra'
  ],
  
  // Pontua√ß√£o m√≠nima para aprova√ß√£o
  MIN_QUALITY_SCORE: 80,
  
  // Limites de valores
  MIN_BUDGET: 10000,
  MAX_BUDGET: 10000000,
  MIN_INCOME: 500,
  MAX_INCOME: 50000
};

// ‚úÖ PADR√ïES DE VALIDA√á√ÉO PORTUGUESES
const PORTUGUESE_PATTERNS = {
  // Cart√£o de Cidad√£o: 12345678 9 ZZ4
  CC: /^(\d{8})\s?(\d{1})\s?([A-Z]{2})(\d{1})$/,
  
  // NIF: 9 d√≠gitos
  NIF: /^\d{9}$/,
  
  // C√≥digo Postal: NNNN-NNN
  POSTAL_CODE: /^\d{4}-\d{3}$/,
  
  // Telefone portugu√™s: +351, 91, 96, 92, 93, etc.
  PHONE: /^(\+351|351)?\s?(9[1236]|2\d)\s?\d{3}\s?\d{4}$/,
  
  // Email
  EMAIL: /^[^\s@]+@[^\s@]+\.[^\s@]+$/
};

// ‚úÖ LISTA DE CONCELHOS PORTUGUESES (amostra)
const PORTUGUESE_COUNTIES = [
  'Lisboa', 'Porto', 'Coimbra', 'Braga', 'Aveiro', 'Set√∫bal', 'Funchal',
  'Vila Nova de Gaia', 'Amadora', 'Matosinhos', 'Gondomar', 'Sintra',
  'Cascais', 'Oeiras', 'Almada', 'Maia', 'Valongo', 'Paredes', 'Santa Maria da Feira',
  'Leiria', 'Viseu', '√âvora', 'Santar√©m', 'Faro', 'Portim√£o', 'Albufeira'
];

// ‚úÖ VALIDADOR PRINCIPAL DE CONVERS√ÉO
export class ConversionValidator {
  constructor(debugMode = false) {
    this.debugMode = debugMode;
    this.validationHistory = [];
    this.currentValidation = null;
  }

  // üîç FUN√á√ÉO PRINCIPAL DE VALIDA√á√ÉO
  validateConversion(leadData, formData, options = {}) {
    const startTime = Date.now();
    
    this.log('üîç Iniciando valida√ß√£o completa de convers√£o', {
      leadId: leadData?.id,
      formDataKeys: Object.keys(formData || {}),
      options
    });

    const validation = {
      timestamp: new Date().toISOString(),
      leadId: leadData?.id,
      isValid: false,
      qualityScore: 0,
      errors: [],
      warnings: [],
      details: {},
      recommendations: []
    };

    this.currentValidation = validation;

    try {
      // 1. Validar dados do lead
      this.validateLeadData(leadData, validation);
      
      // 2. Validar dados pessoais
      this.validatePersonalData(formData, validation);
      
      // 3. Validar dados financeiros
      this.validateFinancialData(formData, validation);
      
      // 4. Validar dados do im√≥vel
      this.validatePropertyData(formData, validation);
      
      // 5. Validar timeline
      this.validateTimelineData(formData, validation);
      
      // 6. Validar c√¥njuge (se aplic√°vel)
      this.validateSpouseData(formData, validation);
      
      // 7. Calcular pontua√ß√£o de qualidade
      this.calculateQualityScore(validation);
      
      // 8. Gerar recomenda√ß√µes
      this.generateRecommendations(validation);
      
      // 9. Determinar se est√° v√°lido para convers√£o
      validation.isValid = validation.errors.length === 0 && 
                          validation.qualityScore >= VALIDATION_RULES.MIN_QUALITY_SCORE;

      const duration = Date.now() - startTime;
      
      this.log(`‚úÖ Valida√ß√£o conclu√≠da em ${duration}ms`, {
        isValid: validation.isValid,
        errors: validation.errors.length,
        warnings: validation.warnings.length,
        qualityScore: validation.qualityScore
      });

    } catch (error) {
      this.log('‚ùå Erro durante valida√ß√£o', error);
      validation.errors.push({
        field: 'system',
        message: 'Erro interno durante valida√ß√£o',
        type: 'critical',
        details: error.message
      });
    }

    this.validationHistory.push(validation);
    return validation;
  }

  // üîç VALIDAR DADOS DO LEAD
  validateLeadData(leadData, validation) {
    this.log('üìã Validando dados do lead');
    
    if (!leadData) {
      validation.errors.push({
        field: 'leadData',
        message: 'Dados do lead n√£o fornecidos',
        type: 'critical'
      });
      return;
    }

    // Verificar campos essenciais do lead
    const requiredLeadFields = ['id', 'name', 'email'];
    
    for (const field of requiredLeadFields) {
      if (!leadData[field]) {
        validation.errors.push({
          field: `lead.${field}`,
          message: `Campo obrigat√≥rio do lead: ${field}`,
          type: 'error'
        });
      }
    }

    // Validar email do lead
    if (leadData.email && !PORTUGUESE_PATTERNS.EMAIL.test(leadData.email)) {
      validation.errors.push({
        field: 'lead.email',
        message: 'Email do lead inv√°lido',
        type: 'error'
      });
    }

    validation.details.leadValidation = {
      hasId: !!leadData.id,
      hasName: !!leadData.name,
      hasEmail: !!leadData.email,
      emailValid: leadData.email ? PORTUGUESE_PATTERNS.EMAIL.test(leadData.email) : false
    };
  }

  // üîç VALIDAR DADOS PESSOAIS
  validatePersonalData(formData, validation) {
    this.log('üë§ Validando dados pessoais');
    
    if (!formData) {
      validation.errors.push({
        field: 'formData',
        message: 'Dados do formul√°rio n√£o fornecidos',
        type: 'critical'
      });
      return;
    }

    // Validar Cart√£o de Cidad√£o
    this.validateCC(formData.numeroCC, validation);
    
    // Validar NIF
    this.validateNIF(formData.numeroFiscal, validation);
    
    // Validar profiss√£o
    if (!formData.profissao?.trim()) {
      validation.errors.push({
        field: 'profissao',
        message: 'Profiss√£o √© obrigat√≥ria',
        type: 'error'
      });
    } else if (formData.profissao.length < 3) {
      validation.warnings.push({
        field: 'profissao',
        message: 'Profiss√£o muito curta, pode n√£o ser espec√≠fica suficiente',
        type: 'quality'
      });
    }

    // Validar resid√™ncia
    this.validateAddress(formData.residencia, validation, 'residencia');
    
    // Validar naturalidade
    this.validateNaturalidade(formData.naturalidade, validation);
    
    // Validar estado civil
    this.validateEstadoCivil(formData.estadoCivil, formData.comunhaoBens, validation);

    validation.details.personalData = {
      ccValid: this.isValidCC(formData.numeroCC),
      nifValid: this.isValidNIF(formData.numeroFiscal),
      hasProfession: !!formData.profissao,
      hasCompleteAddress: this.hasCompleteAddress(formData.residencia),
      hasNaturalidade: !!formData.naturalidade?.concelho
    };
  }

  // üîç VALIDAR CART√ÉO DE CIDAD√ÉO
  validateCC(numeroCC, validation) {
    if (!numeroCC?.trim()) {
      validation.errors.push({
        field: 'numeroCC',
        message: 'N√∫mero do Cart√£o de Cidad√£o √© obrigat√≥rio',
        type: 'error'
      });
      return;
    }

    // Remover espa√ßos e validar formato
    const cleanCC = numeroCC.replace(/\s/g, '');
    
    if (!PORTUGUESE_PATTERNS.CC.test(cleanCC)) {
      validation.errors.push({
        field: 'numeroCC',
        message: 'Formato do Cart√£o de Cidad√£o inv√°lido (deve ser: 12345678 9 ZZ4)',
        type: 'error'
      });
      return;
    }

    // Valida√ß√£o adicional do d√≠gito verificador
    const match = cleanCC.match(PORTUGUESE_PATTERNS.CC);
    if (match) {
      const [, number, check1, letters, check2] = match;
      
      // Validar d√≠gitos verificadores (algoritmo simplificado)
      if (!this.validateCCCheckDigits(number, check1, letters, check2)) {
        validation.warnings.push({
          field: 'numeroCC',
          message: 'D√≠gitos verificadores do CC podem estar incorretos',
          type: 'verification'
        });
      }
    }
  }

  // üîç VALIDAR NIF
  validateNIF(numeroFiscal, validation) {
    if (!numeroFiscal?.trim()) {
      validation.errors.push({
        field: 'numeroFiscal',
        message: 'N√∫mero de Identifica√ß√£o Fiscal √© obrigat√≥rio',
        type: 'error'
      });
      return;
    }

    if (!PORTUGUESE_PATTERNS.NIF.test(numeroFiscal)) {
      validation.errors.push({
        field: 'numeroFiscal',
        message: 'NIF deve ter exatamente 9 d√≠gitos',
        type: 'error'
      });
      return;
    }

    // Validar d√≠gito verificador do NIF
    if (!this.validateNIFCheckDigit(numeroFiscal)) {
      validation.errors.push({
        field: 'numeroFiscal',
        message: 'D√≠gito verificador do NIF inv√°lido',
        type: 'error'
      });
    }

    // Verificar se √© NIF de pessoa singular
    const firstDigit = parseInt(numeroFiscal[0]);
    if (![1, 2, 3].includes(firstDigit)) {
      validation.warnings.push({
        field: 'numeroFiscal',
        message: 'NIF n√£o parece ser de pessoa singular',
        type: 'verification'
      });
    }
  }

  // üîç VALIDAR MORADA
  validateAddress(address, validation, prefix = '') {
    if (!address) {
      validation.errors.push({
        field: `${prefix}.address`,
        message: 'Dados de morada s√£o obrigat√≥rios',
        type: 'error'
      });
      return;
    }

    // Validar rua
    if (!address.rua?.trim()) {
      validation.errors.push({
        field: `${prefix}.rua`,
        message: 'Rua √© obrigat√≥ria',
        type: 'error'
      });
    }

    // Validar c√≥digo postal
    if (!address.codigoPostal?.trim()) {
      validation.errors.push({
        field: `${prefix}.codigoPostal`,
        message: 'C√≥digo postal √© obrigat√≥rio',
        type: 'error'
      });
    } else if (!PORTUGUESE_PATTERNS.POSTAL_CODE.test(address.codigoPostal)) {
      validation.errors.push({
        field: `${prefix}.codigoPostal`,
        message: 'Formato do c√≥digo postal inv√°lido (deve ser NNNN-NNN)',
        type: 'error'
      });
    }

    // Validar localidade
    if (!address.localidade?.trim()) {
      validation.errors.push({
        field: `${prefix}.localidade`,
        message: 'Localidade √© obrigat√≥ria',
        type: 'error'
      });
    }

    // Sugerir concelho se n√£o fornecido
    if (!address.concelho?.trim()) {
      validation.warnings.push({
        field: `${prefix}.concelho`,
        message: 'Concelho n√£o especificado, recomenda-se o preenchimento',
        type: 'completeness'
      });
    }
  }

  // üîç VALIDAR NATURALIDADE
  validateNaturalidade(naturalidade, validation) {
    if (!naturalidade?.concelho?.trim()) {
      validation.errors.push({
        field: 'naturalidade.concelho',
        message: 'Concelho de naturalidade √© obrigat√≥rio',
        type: 'error'
      });
      return;
    }

    // Verificar se o concelho √© v√°lido
    const isValidCounty = PORTUGUESE_COUNTIES.some(county => 
      county.toLowerCase().includes(naturalidade.concelho.toLowerCase()) ||
      naturalidade.concelho.toLowerCase().includes(county.toLowerCase())
    );

    if (!isValidCounty) {
      validation.warnings.push({
        field: 'naturalidade.concelho',
        message: 'Concelho pode n√£o estar correto, verificar ortografia',
        type: 'verification'
      });
    }
  }

  // üîç VALIDAR ESTADO CIVIL
  validateEstadoCivil(estadoCivil, comunhaoBens, validation) {
    const validStates = ['solteiro', 'casado', 'divorciado', 'viuvo', 'uniao_facto'];
    
    if (!estadoCivil || !validStates.includes(estadoCivil)) {
      validation.errors.push({
        field: 'estadoCivil',
        message: 'Estado civil inv√°lido',
        type: 'error'
      });
      return;
    }

    // Se casado ou uni√£o de facto, comunh√£o de bens √© obrigat√≥ria
    if (['casado', 'uniao_facto'].includes(estadoCivil)) {
      if (!comunhaoBens?.trim()) {
        validation.errors.push({
          field: 'comunhaoBens',
          message: 'Regime de bens √© obrigat√≥rio para casados/uni√£o de facto',
          type: 'error'
        });
      }
    }
  }

  // üîç VALIDAR DADOS FINANCEIROS
  validateFinancialData(formData, validation) {
    this.log('üí∞ Validando dados financeiros');

    // Pelo menos um tipo de rendimento deve estar preenchido
    const hasMonthly = formData.rendimentoMensal && !isNaN(formData.rendimentoMensal) && parseFloat(formData.rendimentoMensal) > 0;
    const hasYearly = formData.rendimentoAnual && !isNaN(formData.rendimentoAnual) && parseFloat(formData.rendimentoAnual) > 0;

    if (!hasMonthly && !hasYearly) {
      validation.errors.push({
        field: 'rendimento',
        message: 'Pelo menos um tipo de rendimento (mensal ou anual) √© obrigat√≥rio',
        type: 'error'
      });
    }

    // Validar rendimento mensal
    if (hasMonthly) {
      const monthlyIncome = parseFloat(formData.rendimentoMensal);
      
      if (monthlyIncome < VALIDATION_RULES.MIN_INCOME) {
        validation.warnings.push({
          field: 'rendimentoMensal',
          message: `Rendimento mensal muito baixo (‚Ç¨${monthlyIncome}), verificar se est√° correto`,
          type: 'verification'
        });
      }
      
      if (monthlyIncome > VALIDATION_RULES.MAX_INCOME) {
        validation.warnings.push({
          field: 'rendimentoMensal',
          message: `Rendimento mensal muito alto (‚Ç¨${monthlyIncome}), verificar se est√° correto`,
          type: 'verification'
        });
      }
    }

    // Validar consist√™ncia entre rendimentos
    if (hasMonthly && hasYearly) {
      const monthlyIncome = parseFloat(formData.rendimentoMensal);
      const yearlyIncome = parseFloat(formData.rendimentoAnual);
      const expectedYearly = monthlyIncome * 14; // 14 meses em Portugal
      
      const discrepancy = Math.abs(yearlyIncome - expectedYearly) / expectedYearly;
      
      if (discrepancy > 0.2) { // Mais de 20% de diferen√ßa
        validation.warnings.push({
          field: 'rendimento',
          message: 'Rendimento mensal e anual n√£o s√£o consistentes entre si',
          type: 'consistency'
        });
      }
    }

    // Validar situa√ß√£o de cr√©dito
    const validCreditSituations = ['sem_restricoes', 'restricoes_menores', 'restricoes_significativas', 'incumprimento'];
    if (formData.situacaoCredito && !validCreditSituations.includes(formData.situacaoCredito)) {
      validation.warnings.push({
        field: 'situacaoCredito',
        message: 'Situa√ß√£o de cr√©dito inv√°lida',
        type: 'format'
      });
    }

    // Validar pr√©-aprova√ß√£o
    if (formData.preAprovacaoCredito && formData.valorPreAprovado) {
      const preApprovedValue = parseFloat(formData.valorPreAprovado);
      
      if (isNaN(preApprovedValue) || preApprovedValue <= 0) {
        validation.warnings.push({
          field: 'valorPreAprovado',
          message: 'Valor de pr√©-aprova√ß√£o inv√°lido',
          type: 'format'
        });
      }
    }

    validation.details.financialData = {
      hasIncomeData: hasMonthly || hasYearly,
      monthlyIncome: hasMonthly ? parseFloat(formData.rendimentoMensal) : null,
      yearlyIncome: hasYearly ? parseFloat(formData.rendimentoAnual) : null,
      hasPreApproval: !!formData.preAprovacaoCredito,
      creditSituation: formData.situacaoCredito
    };
  }

  // üîç VALIDAR DADOS DO IM√ìVEL
  validatePropertyData(formData, validation) {
    this.log('üè† Validando dados do im√≥vel');

    // Tipo de im√≥vel √© obrigat√≥rio
    if (!formData.tipoImovelProcurado || !Array.isArray(formData.tipoImovelProcurado) || formData.tipoImovelProcurado.length === 0) {
      validation.errors.push({
        field: 'tipoImovelProcurado',
        message: 'Pelo menos um tipo de im√≥vel deve ser selecionado',
        type: 'error'
      });
    }

    // Or√ßamento m√°ximo √© obrigat√≥rio
    if (!formData.orcamentoMaximo || isNaN(formData.orcamentoMaximo) || parseFloat(formData.orcamentoMaximo) <= 0) {
      validation.errors.push({
        field: 'orcamentoMaximo',
        message: 'Or√ßamento m√°ximo √© obrigat√≥rio e deve ser um valor v√°lido',
        type: 'error'
      });
    } else {
      const maxBudget = parseFloat(formData.orcamentoMaximo);
      
      // Verificar limites razo√°veis
      if (maxBudget < VALIDATION_RULES.MIN_BUDGET) {
        validation.warnings.push({
          field: 'orcamentoMaximo',
          message: `Or√ßamento muito baixo (‚Ç¨${maxBudget}), verificar se est√° correto`,
          type: 'verification'
        });
      }
      
      if (maxBudget > VALIDATION_RULES.MAX_BUDGET) {
        validation.warnings.push({
          field: 'orcamentoMaximo',
          message: `Or√ßamento muito alto (‚Ç¨${maxBudget}), verificar se est√° correto`,
          type: 'verification'
        });
      }
    }

    // Validar consist√™ncia entre or√ßamento m√≠nimo e m√°ximo
    if (formData.orcamentoMinimo && formData.orcamentoMaximo) {
      const minBudget = parseFloat(formData.orcamentoMinimo);
      const maxBudget = parseFloat(formData.orcamentoMaximo);
      
      if (minBudget >= maxBudget) {
        validation.errors.push({
          field: 'orcamento',
          message: 'Or√ßamento m√≠nimo deve ser inferior ao m√°ximo',
          type: 'logic'
        });
      }
      
      // Verificar se a diferen√ßa n√£o √© muito pequena
      const difference = (maxBudget - minBudget) / maxBudget;
      if (difference < 0.1) { // Menos de 10% de diferen√ßa
        validation.warnings.push({
          field: 'orcamento',
          message: 'Diferen√ßa entre or√ßamento m√≠nimo e m√°ximo √© muito pequena',
          type: 'range'
        });
      }
    }

    // Validar localiza√ß√£o preferida
    if (formData.localizacaoPreferida && Array.isArray(formData.localizacaoPreferida) && formData.localizacaoPreferida.length === 0) {
      validation.warnings.push({
        field: 'localizacaoPreferida',
        message: 'Nenhuma localiza√ß√£o preferida especificada',
        type: 'completeness'
      });
    }

    validation.details.propertyData = {
      hasPropertyTypes: formData.tipoImovelProcurado?.length > 0,
      propertyTypesCount: formData.tipoImovelProcurado?.length || 0,
      hasBudget: !!formData.orcamentoMaximo,
      budgetRange: formData.orcamentoMaximo ? parseFloat(formData.orcamentoMaximo) : null,
      hasLocation: formData.localizacaoPreferida?.length > 0
    };
  }

  // üîç VALIDAR TIMELINE
  validateTimelineData(formData, validation) {
    this.log('‚è∞ Validando timeline');

    // Prazo para decis√£o √© obrigat√≥rio
    if (!formData.prazoDecisao?.trim()) {
      validation.errors.push({
        field: 'prazoDecisao',
        message: 'Prazo para decis√£o √© obrigat√≥rio',
        type: 'error'
      });
    }

    // Motivo da compra √© obrigat√≥rio
    if (!formData.motivoCompra?.trim()) {
      validation.errors.push({
        field: 'motivoCompra',
        message: 'Motivo da compra √© obrigat√≥rio',
        type: 'error'
      });
    }

    // Validar prioridade
    const validPriorities = ['normal', 'alta', 'urgente'];
    if (formData.prioridadeConversao && !validPriorities.includes(formData.prioridadeConversao)) {
      validation.warnings.push({
        field: 'prioridadeConversao',
        message: 'Prioridade de convers√£o inv√°lida',
        type: 'format'
      });
    }

    validation.details.timelineData = {
      hasDecisionTimeline: !!formData.prazoDecisao,
      hasPurchaseReason: !!formData.motivoCompra,
      priority: formData.prioridadeConversao || 'normal'
    };
  }

  // üîç VALIDAR DADOS DO C√îNJUGE
  validateSpouseData(formData, validation) {
    if (!formData.temConjuge || !['casado', 'uniao_facto'].includes(formData.estadoCivil)) {
      return; // C√¥njuge n√£o √© necess√°rio
    }

    this.log('üíë Validando dados do c√¥njuge');

    const spouse = formData.conjuge || {};

    // Nome do c√¥njuge √© obrigat√≥rio
    if (!spouse.nome?.trim()) {
      validation.errors.push({
        field: 'conjuge.nome',
        message: 'Nome do c√¥njuge √© obrigat√≥rio',
        type: 'error'
      });
    }

    // CC do c√¥njuge √© obrigat√≥rio
    if (!spouse.numeroCC?.trim()) {
      validation.errors.push({
        field: 'conjuge.numeroCC',
        message: 'Cart√£o de Cidad√£o do c√¥njuge √© obrigat√≥rio',
        type: 'error'
      });
    } else {
      // Validar formato do CC
      const cleanCC = spouse.numeroCC.replace(/\s/g, '');
      if (!PORTUGUESE_PATTERNS.CC.test(cleanCC)) {
        validation.errors.push({
          field: 'conjuge.numeroCC',
          message: 'Formato do CC do c√¥njuge inv√°lido',
          type: 'error'
        });
      }
    }

    // NIF do c√¥njuge √© obrigat√≥rio
    if (!spouse.numeroFiscal?.trim()) {
      validation.errors.push({
        field: 'conjuge.numeroFiscal',
        message: 'NIF do c√¥njuge √© obrigat√≥rio',
        type: 'error'
      });
    } else {
      // Validar NIF
      if (!PORTUGUESE_PATTERNS.NIF.test(spouse.numeroFiscal)) {
        validation.errors.push({
          field: 'conjuge.numeroFiscal',
          message: 'NIF do c√¥njuge inv√°lido',
          type: 'error'
        });
      } else if (!this.validateNIFCheckDigit(spouse.numeroFiscal)) {
        validation.errors.push({
          field: 'conjuge.numeroFiscal',
          message: 'D√≠gito verificador do NIF do c√¥njuge inv√°lido',
          type: 'error'
        });
      }
    }

    // Verificar se os dados do c√¥njuge n√£o s√£o iguais aos do principal
    if (spouse.numeroCC === formData.numeroCC) {
      validation.errors.push({
        field: 'conjuge.numeroCC',
        message: 'CC do c√¥njuge n√£o pode ser igual ao do cliente principal',
        type: 'logic'
      });
    }

    if (spouse.numeroFiscal === formData.numeroFiscal) {
      validation.errors.push({
        field: 'conjuge.numeroFiscal',
        message: 'NIF do c√¥njuge n√£o pode ser igual ao do cliente principal',
        type: 'logic'
      });
    }

    validation.details.spouseData = {
      hasSpouse: formData.temConjuge,
      spouseComplete: !!(spouse.nome && spouse.numeroCC && spouse.numeroFiscal),
      spouseDataValid: this.isValidCC(spouse.numeroCC) && this.isValidNIF(spouse.numeroFiscal)
    };
  }

  // üîç CALCULAR PONTUA√á√ÉO DE QUALIDADE
  calculateQualityScore(validation) {
    this.log('üéØ Calculando pontua√ß√£o de qualidade');

    let score = 0;
    const maxScore = 100;

    // Dados pessoais (30 pontos)
    if (validation.details.personalData?.ccValid) score += 8;
    if (validation.details.personalData?.nifValid) score += 8;
    if (validation.details.personalData?.hasProfession) score += 5;
    if (validation.details.personalData?.hasCompleteAddress) score += 5;
    if (validation.details.personalData?.hasNaturalidade) score += 4;

    // Dados financeiros (25 pontos)
    if (validation.details.financialData?.hasIncomeData) score += 15;
    if (validation.details.financialData?.hasPreApproval) score += 10;

    // Dados do im√≥vel (25 pontos)
    if (validation.details.propertyData?.hasPropertyTypes) score += 10;
    if (validation.details.propertyData?.hasBudget) score += 10;
    if (validation.details.propertyData?.hasLocation) score += 5;

    // Timeline (10 pontos)
    if (validation.details.timelineData?.hasDecisionTimeline) score += 5;
    if (validation.details.timelineData?.hasPurchaseReason) score += 5;

    // C√¥njuge (10 pontos bonus se aplic√°vel)
    if (validation.details.spouseData?.hasSpouse && validation.details.spouseData?.spouseComplete) {
      score += 10;
    }

    // Penaliza√ß√µes por erros
    score -= validation.errors.length * 5;
    score -= validation.warnings.length * 2;

    // Garantir que est√° entre 0 e 100
    score = Math.max(0, Math.min(maxScore, score));

    validation.qualityScore = score;

    this.log(`üìä Pontua√ß√£o de qualidade calculada: ${score}/100`);
  }

  // üîç GERAR RECOMENDA√á√ïES
  generateRecommendations(validation) {
    const recommendations = [];

    // Recomenda√ß√µes baseadas em erros
    if (validation.errors.length > 0) {
      recommendations.push({
        type: 'critical',
        message: `Corrigir ${validation.errors.length} erro(s) cr√≠tico(s) antes de converter`,
        priority: 'high',
        fields: validation.errors.map(e => e.field)
      });
    }

    // Recomenda√ß√µes de qualidade
    if (validation.qualityScore < 60) {
      recommendations.push({
        type: 'quality',
        message: 'Pontua√ß√£o de qualidade baixa - considere obter mais informa√ß√µes',
        priority: 'medium',
        suggestions: ['Completar dados financeiros', 'Especificar localiza√ß√£o preferida', 'Adicionar documenta√ß√£o']
      });
    }

    // Recomenda√ß√µes espec√≠ficas
    if (!validation.details.financialData?.hasPreApproval) {
      recommendations.push({
        type: 'opportunity',
        message: 'Cliente sem pr√©-aprova√ß√£o - oportunidade para assist√™ncia financeira',
        priority: 'low',
        action: 'Sugerir consultoria de cr√©dito'
      });
    }

    if (validation.details.propertyData?.propertyTypesCount > 3) {
      recommendations.push({
        type: 'focus',
        message: 'Cliente interessado em muitos tipos de im√≥vel - pode precisar de orienta√ß√£o',
        priority: 'medium',
        action: 'Agendar reuni√£o para definir prioridades'
      });
    }

    validation.recommendations = recommendations;
    this.log(`üí° Geradas ${recommendations.length} recomenda√ß√µes`);
  }

  // üõ†Ô∏è FUN√á√ïES AUXILIARES DE VALIDA√á√ÉO

  isValidCC(numeroCC) {
    if (!numeroCC) return false;
    const cleanCC = numeroCC.replace(/\s/g, '');
    return PORTUGUESE_PATTERNS.CC.test(cleanCC);
  }

  isValidNIF(numeroFiscal) {
    if (!numeroFiscal) return false;
    return PORTUGUESE_PATTERNS.NIF.test(numeroFiscal) && this.validateNIFCheckDigit(numeroFiscal);
  }

  validateNIFCheckDigit(nif) {
    if (!nif || nif.length !== 9) return false;
    
    const digits = nif.split('').map(Number);
    const checkDigit = digits[8];
    
    let sum = 0;
    for (let i = 0; i < 8; i++) {
      sum += digits[i] * (9 - i);
    }
    
    const remainder = sum % 11;
    const expectedCheckDigit = remainder < 2 ? 0 : 11 - remainder;
    
    return checkDigit === expectedCheckDigit;
  }

  validateCCCheckDigits(number, check1, letters, check2) {
    // Algoritmo simplificado - numa implementa√ß√£o real seria mais complexo
    return true; // Por agora assumir v√°lido
  }

  hasCompleteAddress(address) {
    return address && 
           address.rua?.trim() && 
           address.codigoPostal?.trim() && 
           address.localidade?.trim() &&
           PORTUGUESE_PATTERNS.POSTAL_CODE.test(address.codigoPostal);
  }

  // üîç FUN√á√ÉO DE LOG
  log(message, data = null) {
    if (this.debugMode) {
      const timestamp = new Date().toLocaleTimeString('pt-PT');
      console.log(`[${timestamp}] VALIDATION:`, message, data);
    }
  }

  // üìä RELAT√ìRIO DE VALIDA√á√ÉO
  generateValidationReport(validation) {
    return {
      summary: {
        isValid: validation.isValid,
        qualityScore: validation.qualityScore,
        errorsCount: validation.errors.length,
        warningsCount: validation.warnings.length,
        recommendationsCount: validation.recommendations.length
      },
      details: validation.details,
      issues: {
        errors: validation.errors,
        warnings: validation.warnings
      },
      recommendations: validation.recommendations,
      timestamp: validation.timestamp
    };
  }

  // üßπ LIMPEZA DE DADOS
  cleanupValidationHistory() {
    // Manter apenas as √∫ltimas 10 valida√ß√µes
    this.validationHistory = this.validationHistory.slice(-10);
  }
}

// ‚úÖ FUN√á√ÉO DE CONVENI√äNCIA PARA VALIDA√á√ÉO R√ÅPIDA
export const validateLeadConversion = (leadData, formData, options = {}) => {
  const validator = new ConversionValidator(options.debug || false);
  return validator.validateConversion(leadData, formData, options);
};

// ‚úÖ EXPORTAR CONSTANTES √öTEIS
export {
  VALIDATION_RULES,
  PORTUGUESE_PATTERNS,
  PORTUGUESE_COUNTIES
};

// ‚úÖ EXPORTAR CLASSE PRINCIPAL
export default ConversionValidator;