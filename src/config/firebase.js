// src/config/firebase.js
import { initializeApp } from 'firebase/app';
import { getFirestore, connectFirestoreEmulator } from 'firebase/firestore';
import { getAuth, connectAuthEmulator } from 'firebase/auth';

// üî• CONFIGURA√á√ÉO FIREBASE - MyImoMate 3.0
// ============================================

// üö® CONFIGURA√á√ÉO FIREBASE - API KEY ATUALIZADA
// =============================================
// PROBLEMA IDENTIFICADO: API key anterior inv√°lida/desativada
// SOLU√á√ÉO: Nova API key obtida do Firebase Console

const firebaseConfig = {
  apiKey: "AIzaSyDczFqGCwPPnLcvY5kWn0trshH9BMqVo1A",
  authDomain: "myimomate3-0.firebaseapp.com",
  projectId: "myimomate3-0",
  storageBucket: "myimomate3-0.firebasestorage.app",
  messagingSenderId: "971739318329",
  appId: "1:971739318329:web:704690b62e852a840325e8"
};



// Valida√ß√£o da configura√ß√£o
const validateConfig = (config) => {
  const requiredFields = ['apiKey', 'authDomain', 'projectId'];
  const missingFields = requiredFields.filter(field => !config[field]);
  
  if (missingFields.length > 0) {
    throw new Error(`Configura√ß√£o Firebase inv√°lida. Campos em falta: ${missingFields.join(', ')}`);
  }
  
  // Validar formato da API key
  if (!config.apiKey.startsWith('AIza')) {
    console.warn('‚ö†Ô∏è API Key Firebase pode estar incorreta');
  }
  
  // Validar dom√≠nio
  if (!config.authDomain.includes('.firebaseapp.com')) {
    console.warn('‚ö†Ô∏è Auth Domain Firebase pode estar incorreto');
  }
  
  return true;
};

// Fun√ß√£o para detectar e resolver problemas de API key
const diagnoseApiKeyIssue = () => {
  console.log('üîß === DIAGN√ìSTICO DE API KEY ===');
  console.log('');
  console.log('üö® PROBLEMA IDENTIFICADO: API key inv√°lida');
  console.log('üìç Erro: auth/api-key-not-valid.-please-pass-a-valid-api-key.');
  console.log('');
  console.log('‚úÖ SOLU√á√ïES POSS√çVEIS:');
  console.log('');
  console.log('1. üîÑ OBTER NOVA API KEY:');
  console.log('   ‚Ä¢ V√° a: https://console.firebase.google.com/project/myimomate3-0');
  console.log('   ‚Ä¢ Project Settings > General > Your apps');
  console.log('   ‚Ä¢ Clique na app web (√≠cone </>) ');
  console.log('   ‚Ä¢ Copie a nova API key');
  console.log('');
  console.log('2. üîç VERIFICAR RESTRI√á√ïES:');
  console.log('   ‚Ä¢ Google Cloud Console > APIs & Services > Credentials');
  console.log('   ‚Ä¢ Verifique se a API key n√£o tem restri√ß√µes excessivas');
  console.log('');
  console.log('3. ‚ûï ADICIONAR DOM√çNIOS AUTORIZADOS:');
  console.log('   ‚Ä¢ Firebase Console > Authentication > Settings');
  console.log('   ‚Ä¢ Authorized domains: adicionar localhost, 127.0.0.1');
  console.log('');
  console.log('4. üîÑ REGENERAR SE NECESS√ÅRIO:');
  console.log('   ‚Ä¢ Eliminar a API key problem√°tica');
  console.log('   ‚Ä¢ Gerar nova configura√ß√£o Firebase');
  console.log('');
  console.log('üìù Ap√≥s obter nova API key, substitua em src/config/firebase.js');
};

// Fun√ß√£o para testar conectividade
const testFirebaseConnectivity = async () => {
  console.log('üß™ Testando conectividade Firebase...');
  
  try {
    // Testar se conseguimos fazer uma opera√ß√£o simples
    if (auth) {
      console.log('‚úÖ Firebase Auth objeto criado');
      console.log('üîë Auth settings:', {
        apiKey: firebaseConfig.apiKey.substring(0, 10) + '...',
        authDomain: firebaseConfig.authDomain,
        languageCode: auth.languageCode
      });
    } else {
      console.error('‚ùå Firebase Auth objeto √© null');
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå Erro no teste de conectividade:', error);
    return false;
  }
};

// Fun√ß√£o de inicializa√ß√£o com tratamento espec√≠fico de erros de API key
const initializeFirebaseApp = () => {
  try {
    // Validar configura√ß√£o antes de inicializar
    validateConfig(firebaseConfig);
    
    // Inicializar Firebase
    const app = initializeApp(firebaseConfig);
    
    console.log('üî• Firebase inicializado com sucesso!');
    console.log('üì± App Name:', app.name);
    console.log('üèóÔ∏è Project ID:', firebaseConfig.projectId);
    console.log('üåç Ambiente:', import.meta.env.PROD ? 'Produ√ß√£o' : 'Desenvolvimento');
    
    return app;
    
  } catch (error) {
    console.error('‚ùå Erro ao inicializar Firebase:', error);
    
    // Verificar se √© erro espec√≠fico de API key
    if (error.message.includes('api-key') || error.code?.includes('api-key')) {
      console.error('üö® ERRO ESPEC√çFICO DE API KEY DETECTADO!');
      diagnoseApiKeyIssue();
    }
    
    console.error('üîß Configura√ß√£o utilizada:', {
      ...firebaseConfig,
      apiKey: firebaseConfig.apiKey.substring(0, 10) + '...' // Ocultar API key nos logs
    });
    
    throw error;
  }
};

// Inicializar app com fallback para API key alternativa
let app;
try {
  app = initializeFirebaseApp();
  
  // Testar conectividade ap√≥s inicializa√ß√£o
  setTimeout(() => {
    testFirebaseConnectivity();
  }, 1000);
  
} catch (error) {
  console.error('üí• Firebase n√£o conseguiu inicializar:', error.message);
  
  // Se for erro de API key, mostrar instru√ß√µes espec√≠ficas
  if (error.message.includes('api-key') || error.code?.includes('api-key')) {
    console.log('');
    console.log('üéØ A√á√ÉO REQUERIDA: Atualizar API key em src/config/firebase.js');
    console.log('üìã Instru√ß√µes detalhadas mostradas acima ‚¨ÜÔ∏è');
    console.log('');
  }
  
  // Em caso de erro, criar um objeto mock para evitar crashes
  app = {
    name: '[ERROR:API-KEY]',
    options: firebaseConfig,
    error: error.message
  };
}

// üî• INICIALIZAR SERVI√áOS FIREBASE
// ================================

// Firestore Database
let db;
try {
  db = getFirestore(app);
  
  // Conectar ao emulador em desenvolvimento (opcional)
  if (import.meta.env.DEV && import.meta.env.VITE_USE_FIREBASE_EMULATOR === 'true') {
    try {
      connectFirestoreEmulator(db, 'localhost', 8080);
      console.log('üîå Conectado ao emulador Firestore');
    } catch (emulatorError) {
      console.log('‚ÑπÔ∏è Emulador Firestore n√£o dispon√≠vel, usando produ√ß√£o');
    }
  }
  
  console.log('üóÑÔ∏è Firestore inicializado');
} catch (error) {
  console.error('‚ùå Erro ao inicializar Firestore:', error);
  db = null;
}

// Firebase Authentication
let auth;
try {
  auth = getAuth(app);
  
  // Configura√ß√µes de Auth
  auth.languageCode = 'pt'; // Portugu√™s
  auth.useDeviceLanguage(); // Usar idioma do dispositivo
  
  // Conectar ao emulador em desenvolvimento (opcional)
  if (import.meta.env.DEV && import.meta.env.VITE_USE_FIREBASE_EMULATOR === 'true') {
    try {
      connectAuthEmulator(auth, 'http://localhost:9099');
      console.log('üîå Conectado ao emulador Auth');
    } catch (emulatorError) {
      console.log('‚ÑπÔ∏è Emulador Auth n√£o dispon√≠vel, usando produ√ß√£o');
    }
  }
  
  console.log('üîê Firebase Auth inicializado');
} catch (error) {
  console.error('‚ùå Erro ao inicializar Auth:', error);
  auth = null;
}

// üîç FUN√á√ïES DE DIAGN√ìSTICO
// =========================

// Verificar conex√£o com Firebase
export const checkFirebaseConnection = async () => {
  const status = {
    app: !!app && app.name !== '[ERROR]',
    auth: !!auth,
    firestore: !!db,
    timestamp: new Date().toISOString()
  };
  
  console.log('üîç Status Firebase:', status);
  return status;
};

// Verificar configura√ß√µes de dom√≠nio
export const validateDomainConfig = () => {
  const currentDomain = window.location.origin;
  const authorizedDomains = [
    'http://localhost:5173',
    'http://localhost:3000',
    'https://myimomate3-0.firebaseapp.com',
    'https://myimomate3-0.web.app'
  ];
  
  const isAuthorized = authorizedDomains.includes(currentDomain);
  
  if (!isAuthorized) {
    console.warn('‚ö†Ô∏è Dom√≠nio atual n√£o est√° na lista de dom√≠nios autorizados do Firebase:');
    console.warn('üåê Dom√≠nio atual:', currentDomain);
    console.warn('‚úÖ Dom√≠nios autorizados:', authorizedDomains);
    console.warn('üîß Adicione este dom√≠nio nas configura√ß√µes do Firebase Console');
  }
  
  return {
    currentDomain,
    isAuthorized,
    authorizedDomains
  };
};

// Diagn√≥stico completo
export const runFirebaseDiagnostics = async () => {
  console.log('üîç === DIAGN√ìSTICO FIREBASE ===');
  
  try {
    // Verificar conex√£o
    const connection = await checkFirebaseConnection();
    
    // Verificar dom√≠nio
    const domain = validateDomainConfig();
    
    // Verificar configura√ß√£o
    const config = {
      hasValidConfig: validateConfig(firebaseConfig),
      environment: import.meta.env.PROD ? 'production' : 'development',
      userAgent: navigator.userAgent
    };
    
    const diagnostic = {
      connection,
      domain,
      config,
      timestamp: new Date().toISOString()
    };
    
    console.log('üìä Diagn√≥stico completo:', diagnostic);
    return diagnostic;
    
  } catch (error) {
    console.error('‚ùå Erro no diagn√≥stico:', error);
    return { error: error.message };
  }
};

// üö® TRATAMENTO DE ERROS ESPEC√çFICOS
// ==================================

// Mapear c√≥digos de erro Firebase para mensagens amig√°veis (atualizado)
export const getFirebaseErrorMessage = (errorCode) => {
  const errorMessages = {
    // Auth errors - API Key espec√≠ficos
    'auth/api-key-not-valid': 'API key Firebase inv√°lida. Contacte o administrador para atualizar a configura√ß√£o.',
    'auth/invalid-api-key': 'API key Firebase inv√°lida. Contacte o administrador para atualizar a configura√ß√£o.',
    'auth/api-key-not-valid.-please-pass-a-valid-api-key.': 'API key Firebase foi desativada ou restringida. √â necess√°rio obter uma nova chave.',
    
    // Auth errors - outros
    'auth/user-not-found': 'Utilizador n√£o encontrado. Verifique o email.',
    'auth/wrong-password': 'Password incorreta. Tente novamente.',
    'auth/email-already-in-use': 'Este email j√° est√° registado. Tente fazer login.',
    'auth/weak-password': 'Password muito fraca. Use pelo menos 6 caracteres.',
    'auth/invalid-email': 'Email inv√°lido. Verifique o formato.',
    'auth/network-request-failed': 'Erro de rede. Verifique a sua conex√£o.',
    'auth/too-many-requests': 'Muitas tentativas. Tente novamente mais tarde.',
    'auth/user-disabled': 'Esta conta foi desativada.',
    'auth/requires-recent-login': '√â necess√°rio fazer login novamente.',
    
    // Firestore errors
    'firestore/permission-denied': 'Sem permiss√£o para esta opera√ß√£o.',
    'firestore/unavailable': 'Servi√ßo temporariamente indispon√≠vel.',
    'firestore/deadline-exceeded': 'Timeout na opera√ß√£o. Tente novamente.',
    
    // Generic
    'default': 'Ocorreu um erro inesperado. Tente novamente.'
  };
  
  return errorMessages[errorCode] || errorMessages.default;
};

// üì§ EXPORTS PRINCIPAIS
// ====================

// Verificar se os servi√ßos est√£o dispon√≠veis antes de exportar
if (!app || app.name === '[ERROR]') {
  console.error('üí• Firebase App n√£o est√° dispon√≠vel');
}

if (!auth) {
  console.error('üí• Firebase Auth n√£o est√° dispon√≠vel');
}

if (!db) {
  console.error('üí• Firebase Firestore n√£o est√° dispon√≠vel');
}

// Exports principais
export { auth, db };
export default app;

// üîß CONFIGURA√á√ïES ADICIONAIS
// ===========================

// Configura√ß√µes de timeout para opera√ß√µes
export const FIREBASE_CONFIG = {
  timeouts: {
    auth: 30000, // 30 segundos
    firestore: 15000, // 15 segundos
    storage: 60000 // 60 segundos
  },
  retry: {
    maxAttempts: 3,
    delayMs: 1000
  }
};

// Log de inicializa√ß√£o final com verifica√ß√£o de API key
const finalStatus = {
  app: !!app && !app.name?.includes('ERROR'),
  auth: !!auth,
  firestore: !!db,
  projectId: firebaseConfig.projectId,
  environment: import.meta.env.PROD ? 'production' : 'development',
  apiKeyStatus: app?.name?.includes('ERROR') ? '‚ùå INV√ÅLIDA' : '‚úÖ V√ÅLIDA'
};

console.log('‚úÖ Firebase config carregado:', finalStatus);

// Verifica√ß√£o espec√≠fica para API key inv√°lida
if (app?.name?.includes('ERROR')) {
  console.warn('');
  console.warn('üö® ATEN√á√ÉO: Firebase n√£o est√° funcional devido a API key inv√°lida');
  console.warn('üîß Execute no console: firebaseDebug.fixApiKey() para obter ajuda');
  console.warn('');
}

// üõ†Ô∏è FUN√á√ïES DE DEBUG GLOBAIS
// ============================
window.firebaseDebug = {
  // Verificar status atual
  status: () => finalStatus,
  
  // Diagnosticar problemas de API key
  fixApiKey: () => {
    diagnoseApiKeyIssue();
    console.log('');
    console.log('üí° Ap√≥s obter nova API key:');
    console.log('1. Substitua em src/config/firebase.js');
    console.log('2. Reinicie o servidor: npm run dev');
    console.log('3. Verifique se o erro desapareceu');
  },
  
  // Verificar conex√£o
  checkConnection: checkFirebaseConnection,
  
  // Validar dom√≠nio
  validateDomain: validateDomainConfig,
  
  // Executar diagn√≥sticos completos
  runDiagnostics: runFirebaseDiagnostics,
  
  // Ver configura√ß√£o atual (sem mostrar API key completa)
  config: () => ({
    ...firebaseConfig,
    apiKey: firebaseConfig.apiKey.substring(0, 10) + '...'
  }),
  
  // Testar conectividade
  testConnection: testFirebaseConnectivity
};

// Executar diagn√≥sticos em desenvolvimento se houver problemas
if (import.meta.env.DEV && app?.name?.includes('ERROR')) {
  console.log('üîß Executando diagn√≥sticos devido a erro de inicializa√ß√£o...');
  setTimeout(() => {
    diagnoseApiKeyIssue();
  }, 1500);
} else if (import.meta.env.DEV) {
  // Executar diagn√≥sticos normais em desenvolvimento
  setTimeout(() => {
    runFirebaseDiagnostics();
  }, 2000);
}

// üí° HELPER: Mostrar instru√ß√µes no console
if (app?.name?.includes('ERROR')) {
  console.log('üí° Para resolver o problema, digite no console: firebaseDebug.fixApiKey()');
} else {
  console.log('üí° Para debugging, digite no console: firebaseDebug.status()');
}